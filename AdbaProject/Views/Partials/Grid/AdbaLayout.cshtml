@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq

@*
    Razor helpers located at the bottom of this file
*@

@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

    @*<div class="umb-grid">*@
    if (oneColumn)
    {
        foreach (var section in Model.sections)
        {
            @*<div class="grid-section">*@
            foreach (var row in section.rows)
            {
                @renderRow(row, true);
            }
            @*</div>*@
        }
    }
    else
    {
        <div class="container">
            <div class="row clearfix">
                @foreach (var s in Model.sections)
                {
                    <div class="grid-section">
                        <div class="col-md-@s.grid column">
                            @foreach (var row in s.rows)
                            {
                                @renderRow(row, false);
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    @*</div>*@
}

@helper renderRow(dynamic row, bool singleColumn)
{
<div @RenderElementAttributes(row)>
    @if (@row.label == "fullWidth")
    {
        foreach (var area in row.areas)
        {
            foreach (var control in area.controls)
            {
                <text>@Html.Partial("grid/editors/base", (object)control)</text>
            }
        }
    }
    else if (row.label == "12_Columns")
    {
        foreach (var area in row.areas)
        {
            foreach (var control in area.controls)
            {
                <text>@Html.Partial("grid/editors/base", (object)control)</text>
            }
        }

    }


    else
    {
        
            <div @RenderElementAttributes(row)>
                @Html.If(singleColumn, "<div class='container'>")
                <div class="row clearfix">
                    @foreach (var area in row.areas)
                    {
                        <div class="col-md-@area.grid column">
                            <div @RenderElementAttributes(area)>
                                @foreach (var control in area.controls)
                                {
                                    if (control != null && control.editor != null && control.editor.view != null)
                                    {
                                        <text>@Html.Partial("grid/editors/base", (object)control)</text>
                                    }
                                }
                            </div>
                        </div>}
                </div>
                @Html.If(singleColumn, "</div>")
            </div>
        
    }
</div>
}

@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var responsiveClassStr = "";
        if (contentItem != null && contentItem.config != null && contentItem.config.responsive != null)
        {
            var first = "";
            dynamic responsiveClasses = Newtonsoft.Json.JsonConvert.DeserializeObject((string)contentItem.config.responsive);

            foreach (var item in responsiveClasses)
            {
                if ((bool)item.selected)
                {
                    responsiveClassStr += $"{first}{item.value}";
                    first = " ";
                }

            }
        }


        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name == "responsive")
                {
                    continue;
                }

                var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value.ToString());
                attrs.Add(property.Name + "=\"" + propertyValue + "\"");
            }

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
            {
                var propertyValue = property.Value.ToString();
                if (string.IsNullOrWhiteSpace(propertyValue) == false)
                {
                    cssVals.Add(property.Name + ":" + propertyValue + ";");
                }
            }

            if (cssVals.Any())
                attrs.Add("style=\"" + HttpUtility.HtmlAttributeEncode(string.Join(" ", cssVals)) + "\"");
        }

        attrs.Add($"class=\"{responsiveClassStr}\"");

        return new MvcHtmlString(string.Join(" ", attrs));
    }
}